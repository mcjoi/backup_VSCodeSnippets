{
  "Print to console3": {
    "prefix": "bong_Class_sqflite_helper_model", //name
    "description": "",
    "body": [
      "import 'dart:async';",
      "import 'dart:io';",
      "import 'package:sqflite/sqflite.dart';",
      "import 'package:path_provider/path_provider.dart';",
      "class MyItem {",
      "int _id;",
      "String _title;",
      "String _date;",
      "MyItem(this._title, this._date);",
      "int get id => _id;",
      "String get title => _title;",
      "set title(String newTitle) {",
      "if (newTitle.length <= 255) {",
      "this._title = newTitle;",
      "}",
      "}",
      "String get date => _date;",
      "set date(String newDate) {",
      "this._date = newDate;",
      "}",
      "Map<String, dynamic> toMap() {",
      "var map = Map<String, dynamic>();",
      "if (id != null) {",
      "map['id'] = _id;",
      "}",
      "map['title'] = _title;",
      "map['date'] = _date;",
      "return map;",
      "}",
      "MyItem.fromMapObject(Map<String, dynamic> map) {",
      "this._id = map['id'];",
      "this._title = map['title'];",
      "this._date = map['date'];",
      "}",
      "}",
      "class DatabaseHelper {",
      "static DatabaseHelper _databaseHelper; // Singleton DatabaseHelper",
      "static Database _database; // Singleton Database",
      "String itemTable = 'itemTable';",
      "String colId = 'id';",
      "String colTitle = 'title';",
      "String colDate = 'date';",
      "DatabaseHelper._createInstance(); // Named constructor to create instance of DatabaseHelper",
      "factory DatabaseHelper() {",
      "if (_databaseHelper == null) {",
      "_databaseHelper = DatabaseHelper",
      "._createInstance(); // This is executed only once, singleton object",
      "}",
      "return _databaseHelper;",
      "}",
      "Future<Database> get database async {",
      "if (_database == null) {",
      "_database = await initializeDatabase();",
      "}",
      "return _database;",
      "}",
      "Future<Database> initializeDatabase() async {",
      "// Get the directory path for both Android and iOS to store database.",
      "Directory directory = await getApplicationDocumentsDirectory();",
      "String path = directory.path + 'items2.db';",
      "var itemsDatabase =",
      "await openDatabase(path, version: 1, onCreate: _createDb);",
      "return itemsDatabase;",
      "}",
      "void _createDb(Database db, int newVersion) async {",
      "await db.execute(",
      "'CREATE TABLE $$itemTable($$colId INTEGER PRIMARY KEY AUTOINCREMENT, $$colTitle TEXT, $$colDate TEXT)');",
      "}",
      "// Fetch Operation: Get all note objects from database",
      "Future<List<Map<String, dynamic>>> getItemMapList() async {",
      "Database db = await this.database;",
      "//",
      "var result = await db.query(itemTable, orderBy: '$$colId ASC');",
      "return result;",
      "}",
      "// Insert Operation: Insert a Note object to database",
      "Future<int> insertItem(MyItem item) async {",
      "Database db = await this.database;",
      "var result = await db.insert(itemTable, item.toMap());",
      "return result;",
      "}",
      "// Update Operation: Update a Note object and save it to database",
      "Future<int> updateItem(MyItem item) async {",
      "var db = await this.database;",
      "var result = await db.update(itemTable, item.toMap(),",
      "where: '$$colId = ?', whereArgs: [item.id]);",
      "return result;",
      "}",
      "// Delete Operation: Delete a Note object from database",
      "Future<int> deleteItem(int id) async {",
      "var db = await this.database;",
      "int result =",
      "await db.rawDelete('DELETE FROM $$itemTable WHERE $$colId = $$id');",
      "return result;",
      "}",
      "// Get number of Note objects in database",
      "Future<int> getCount() async {",
      "Database db = await this.database;",
      "List<Map<String, dynamic>> x =",
      "await db.rawQuery('SELECT COUNT (*) from $$itemTable');",
      "int result = Sqflite.firstIntValue(x);",
      "return result;",
      "}",
      "// Get the 'Map List' [ List<Map> ] and convert it to 'Note List' [ List<Note> ]",
      "Future<List<MyItem>> getItemList() async {",
      "var itemMapList = await getItemMapList(); // Get 'Map List' from database",
      "int count =",
      "itemMapList.length; // Count the number of map entries in db table",
      "List<MyItem> itemList = List<MyItem>();",
      "// For loop to create a 'Note List' from a 'Map List'",
      "for (int i = 0; i < count; i++) {",
      "itemList.add(MyItem.fromMapObject(itemMapList[i]));",
      "}",
      "return itemList;",
      "}",
      "}",
      "/*",
      "void _delete(BuildContext context, MyItem item) async {",
      "int result = await db.deleteItem(item.id);",
      "if (result != 0) {",
      "updateListView();",
      "}",
      "}",
      "void updateListView() {",
      "final Future<Database> dbFuture = db.initializeDatabase();",
      "dbFuture.then((database) {",
      "Future<List<MyItem>> itemListFuture = db.getItemList();",
      "itemListFuture.then((itemLst) {",
      "setState(() {",
      "this.itemLst = itemLst;",
      "this.count = itemLst.length;",
      "});",
      "});",
      "});",
      "}",
      "void _save() async {",
      "item.title = titleController.text;",
      "item.date = DateFormat.yMd().add_Hm().format(DateTime.now());",
      "int result = await db.insertItem(item);",
      "updateListView();",
      "}",
      "void _update(MyItem newItem) async {",
      "int result;",
      "result = await db.updateItem(newItem);",
      "updateListView();",
      "}",
      "DatabaseHelper db = DatabaseHelper(); // DB관리용 DB HELPER ,,, 사실 뭔지 잘 모른다.",
      "List<MyItem> itemLst; //뷰페이지용 리스트",
      "MyItem item = MyItem('', ''); // 개별 아이템 입력용 MYITEM CLASS 변수",
      "// 아이템 리스트가 NULL일 경우, (최초) 빈 리스트를 초기화 한다.",
      "// 그리고 . DB에 데이터가 있을 경우에 업데이트 한다.",
      "if (itemLst == null) {",
      "itemLst = List<MyItem>();",
      "updateListView();",
      "}",
      "*/",
    ],
  }
}